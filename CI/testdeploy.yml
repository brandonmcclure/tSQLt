# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- CITesting

pool:
  vmImage: 'vs2017-win2016'

variables:
  NamePreFix: 'tSQLtCI_DevTestLab_'


steps:

- task: PowerShell@2
  name: Generate_DevTest_Lab_Name
  inputs:
    targetType: 'inline'
    script: |
      $DevTestLabName = If ([string]::IsNullOrEmpty($env:DevTestLabNameOverride)) {("$(NamePreFix)" + (Get-Date).tostring(“yyyyMMdd”) + '_' + $(Build.BuildId))} else {($env:DevTestLabNameOverride)}
      $DevTestLabRGName = $DevTestLabName+'_RG'
      Write-Host 'DevTestLabRGName: ' $DevTestLabRGName
      Write-Host "##vso[task.setvariable variable=DevTestLabRGName;]$DevTestLabRGName"
      Write-Host 'DevTestLabName: ' $DevTestLabName
      Write-Host "##vso[task.setvariable variable=DevTestLabName;]$DevTestLabName"


- task: AzureResourceManagerTemplateDeployment@3
  name: Validate_VM_ArmTemplate
  inputs:
    deploymentScope: 'Resource Group'
    azureResourceManagerConnection: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    subscriptionId: '58c04a99-5b92-410c-9e41-10262f68ca80'
    action: 'Create Or Update Resource Group'
    resourceGroupName: 'NoneExistingResourceGroup'
    location: 'East US 2'
    templateLocation: 'Linked artifact'
    csmFile: 'CI/DevTestLabTemplate.json'
    deploymentMode: 'Validation'



- task: AzurePowerShell@5
  name: Create_DevTest_Lab_With_Other_Resources
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    ScriptType: 'InlineScript'
    Inline: |
      New-AzResourceGroup -Name "$(DevTestLabRGName)" -Location "East US 2" -Tag @{Department="tSQLtCI"; Ephemeral="True"} 
      New-AzResourceGroupDeployment -ResourceGroupName "$(DevTestLabRGName)" -TemplateFile "CI/DevTestLabTemplate.json" -newLabName "$(DevTestLabName)"
      Write-Host 'GetAzResource'
      Get-AzResource -ResourceGroupName "$(DevTestLabRGName)" -ResourceType "Microsoft.Storage/storageAccounts"
      Write-Host '-------------'
      $StorageAccount = (Get-AzResource -ResourceGroupName "$(DevTestLabRGName)" -ResourceType "Microsoft.Storage/storageAccounts").ResourceName
      Write-Host "StorageAccount: >>>" $StorageAccount.ResourceName "<<<"
      Write-Host "##vso[task.setvariable variable=StorageAccount;]$StorageAccount"
      Write-Host '-------------'
      Write-Host 'Currently Existing tSQLtCI Resource Groups:'
      Get-AzResourceGroup -Tag @{Department="tSQLtCI"; Ephemeral="True"} 
    azurePowerShellVersion: 'LatestVersion'

- task: PowerShell@2
  name: Confirm_Variable_Was_Written
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "StorageAccount: >>>" $(StorageAccount) "<<<"


- task: ArchiveFiles@2
  name: Build_DSC_Zip_File
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/CI/DSC'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/DSC.zip'
    replaceExistingArchive: true
    verbose: true

- task: AzureFileCopy@3
  name: COPY_DSC_zip_to_Azure_Storage
  inputs:
    SourcePath: '$(Build.ArtifactStagingDirectory)/DSC.zip'
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    Destination: 'AzureBlob'
    storage: '$(StorageAccount)'
    ContainerName: 'dsc'
    outputStorageUri: 'DSC_Storage_URI'
    outputStorageContainerSasToken: 'DSC_Storage_SAS_Token'
    sasTokenTimeOutInMinutes: '60'



- task: AzureDevTestLabsCreateVM@3
  name: CreateVM
  condition: and(succeeded(), eq(variables['CreateNewVm'], '1'))
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    LabID: /subscriptions/58c04a99-5b92-410c-9e41-10262f68ca80/resourceGroups/$(ResourceGroupName)/providers/Microsoft.DevTestLab/labs/$(DevTestLabName)
    VirtualMachineName: '$(vmName)'
    TemplateFile: 'CI/CreateVMTemplate.json'
#    ParameterOverrides: '-newVMName ''$(vmName)'' -userName ''$(userName)'' -password (ConvertTo-SecureString -String ''$(password)'' -AsPlainText -Force)'
    ParameterOverrides: '-newVMName ''$(vmName)'' -userName ''$(userName)'' -password ''qTv3f9gduUFuc8BQTZUq4MEcFbY3(2H)'' -DSCURI ''$(DSC_Storage_URI)'' -DSCSAS ''$(DSC_Storage_SAS_Token)'' '


- script: echo %CREATEVM_LABVMID%


#- task: CmdLine@2
#  name: Stop_The_PipeLine
#  condition: true
#  inputs:
#    script: |
#      echo end pipeline here
#      
#      echx


- task: Bash@3
  name: print_environment_variables
  inputs:
    targetType: 'inline'
    script: |
      echo 'env start------------'
      env | sort
      echo 'env stop-------------'


- task: AzurePowerShell@4
  name: get_VM_parameters
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    ScriptType: 'FilePath'
    ScriptPath: 'CI/GetLabVMParams.ps1'
    ScriptArguments: '-labVmId ''$(CREATEVM.LABVMID)'' ' 
    #/subscriptions/58c04a99-5b92-410c-9e41-10262f68ca80/resourceGroups/$(ResourceGroupName)/providers/Microsoft.DevTestLab/labs/$(DevTestLabName)/virtualmachines/SQL2014SP3D
    azurePowerShellVersion: 'LatestVersion'


- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Write your PowerShell commands here.
      
      Write-Host "labVmRgName   $env:labVmRgName ---- labVmName   $env:labVmName"

- task: AzureCLI@2
  name: Get_Vm_Status
  inputs:
    azureSubscription: 'tSQLt CI Subscription(58c04a99-5b92-410c-9e41-10262f68ca80)'
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: 'az vm show -g $env:labVmRgName -n NonExistingVM -d'
#    inlineScript: 'az vm show -g $env:labVmRgName -n $env:labVmName -d'



### New-NetFirewallRule -DisplayName "Allow WinRM" -Direction Inbound -LocalPort 5986 -Protocol TCP -Action Allow
### New-NetFirewallRule -DisplayName "Allow SQLServer" -Direction Inbound -LocalPort 1433 -Protocol TCP -Action Allow
### SqlCmd -S localhost -E -Q "PRINT @@VERSION;"
### SqlCmd -S localhost -E -Q "CREATE LOGIN tSQLtExternal WITH PASSWORD = 'qTv3f9gduUFuc8BQTZUq4MEcFbY3(2H)',CHECK_EXPIRATION = OFF, CHECK_POLICY = OFF,DEFAULT_DATABASE = tempdb;ALTER SERVER ROLE sysadmin ADD MEMBER tSQLtExternal;"
### SqlCmd -S localhost -E -Q "EXEC xp_instance_regwrite N'HKEY_LOCAL_MACHINE', N'Software\Microsoft\MSSQLServer\MSSQLServer', N'LoginMode', REG_DWORD, 2"
### Restart-Service -Name "SQL Server (MSSQLSERVER)"
### sql2014sp3d.eastus2.cloudapp.azure.com

- task: PowerShellOnTargetMachines@3
  inputs:
    Machines: '$(labVMFqdn)'
    UserName: 'tSQLt'
    UserPassword: 'qTv3f9gduUFuc8BQTZUq4MEcFbY3(2H)'
    InlineScript: |
      # Write your powershell commands here.
      
      Write-Output "Hello World"